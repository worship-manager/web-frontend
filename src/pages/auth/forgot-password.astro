---
import Container from "@components/container.astro";
import Sectionhead from "@components/sectionhead.astro";
import Button from "@components/ui/button.astro";
import Layout from "@layouts/Layout.astro";
---

<Layout title="Forgot Password">
  <Container>
    <Sectionhead>
      <Fragment slot="title">Forgot Password</Fragment>
      <Fragment slot="desc">Change the password for your account</Fragment>
    </Sectionhead>

    <div class="gap-10 mx-auto max-w-xl mt-16">
      <form id="forgot-password-form" novalidate>
        <div class="mb-5">
          <label>Email</label>
          <input
            type="email"
            placeholder="xxx@xxx.com"
            required
            class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
            name="email"
          />
          <div class="empty-feedback text-red-400 text-sm mt-1">
            Please provide your email address.
          </div>
          <div class="invalid-feedback text-red-400 text-sm mt-1">
            Please provide a valid email address.
          </div>
        </div>
        <div class="mb-5">
          <label>New Password</label>
          <input
            type="password"
            placeholder="xxxxxxxx"
            required
            class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
            name="newPassword"
          />
          <div class="empty-feedback text-red-400 text-sm mt-1">Please provide a new password.</div>
          <div class="invalid-feedback text-red-400 text-sm mt-1">
            Please provide a valid password.
          </div>
        </div>
        <div class="mb-5">
          <label>Confirm Password</label>
          <input
            type="password"
            placeholder="xxxxxxxx"
            required
            class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
            name="confirmPassword"
          />
          <div class="empty-feedback text-red-400 text-sm mt-1">
            Please confirm your new password.
          </div>
          <div class="invalid-feedback text-red-400 text-sm mt-1">Passwords don't match.</div>
        </div>
        <Button type="submit" size="lg" id="submit-btn" block>Get Reset Code</Button>
        <div id="result" class="mt-3 text-center"></div>
      </form>
    </div>
  </Container>
</Layout>

<style>
  .invalid-feedback,
  .empty-feedback {
    display: none;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    border-color: #dc3545;
  }
</style>

<script>
  const form = document.getElementById("forgot-password-form") as HTMLFormElement;
  const result = document.getElementById("result") as HTMLDivElement;
  const submitBtn = document.getElementById("submit-btn") as HTMLButtonElement;
  form?.addEventListener("submit", (e) => {
    e.preventDefault();
    form.classList.add("was-validated");
    if (!form.checkValidity()) {
      (form.querySelectorAll(":invalid")[0] as HTMLElement).focus();
      return;
    }

    submitBtn.disabled = true;

    const formData = new FormData(form);
    const object = Object.fromEntries(formData);
    if (object.newPassword !== object.confirmPassword) {
      result.classList.remove("text-green-500");
      result.classList.add("text-red-500");
      result.innerHTML = "Passwords don't match.";
			submitBtn.disabled = false;
      return;
    }

    const reqUrl = import.meta.env.PUBLIC_SERVER_URL;
    fetch(reqUrl + "/api/user/forgot-password", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(object),
      mode: "cors",
      credentials: "include",
    })
      .then(async (res) => {
        let text = await res.text();
        if (res.status != 200) {
					const error = JSON.parse(text);
          if (error.cause.toLowerCase() !== "code already sent") {
            result.classList.remove("text-green-500");
            result.classList.add("text-red-500");
            result.innerHTML = error.cause;
            return;
          }
					text = "Code sent. Check your email.";
        }

        sessionStorage.setItem("resetPasswordData", JSON.stringify(object));

        result.classList.remove("text-red-500");
        result.classList.add("text-green-500");
        result.innerHTML = text;
        setTimeout(() => {
          location.href = "/auth/reset-password";
        }, 1000);
      })
      .catch((error) => {
        console.log(error);
        result.innerHTML = "Something went wrong!";
      })
      .finally(() => {
        submitBtn.disabled = false;
      });
  });
</script>
